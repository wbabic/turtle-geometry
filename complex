./src//turtle_geometry/geometry.cljc:    #(p/multiply % (p/angle->complex unit))))
./src//turtle_geometry/geometry.cljc:  (vector [_] (p/angle->complex unit))
./src//turtle_geometry/geometry.cljc:            w (p//angle->complex angle)]
./src//turtle_geometry/number/units/polar.cljc:(defn angle->complex
./src//turtle_geometry/number/units/polar.cljc:  ([angle] (angle->complex angle 1))
./src//turtle_geometry/number/units/polar.cljc:  (angle->complex [_] (angle->complex angle))
./src//turtle_geometry/number/units/polar.cljc:  (p/equals? one (angle->complex 0))
./src//turtle_geometry/number/units/polar.cljc:  (p/almost-equals? i (angle->complex 90) 1E-16)
./src//turtle_geometry/number/units/polar.cljc:  (p/equals? i (angle->complex 90))
./src//turtle_geometry/number/units/twenty_four.cljc:(def angle->complex-map
./src//turtle_geometry/number/units/twenty_four.cljc:(defn angle->complex [angle]
./src//turtle_geometry/number/units/twenty_four.cljc:      (angle->complex-map a)
./src//turtle_geometry/number/units/twenty_four.cljc:      (p/multiply (p/negative one) (angle->complex-map (- a 180))))))
./src//turtle_geometry/number/units/twenty_four.cljc:  (p/angle->complex [_] (angle->complex angle))
./src//turtle_geometry/number/units/twenty_four.cljc:  (angle->complex 15)
./src//turtle_geometry/number/units/twenty_four.cljc:  (p/angle->complex (unit 15))
./src//turtle_geometry/number/units/twenty_four.cljc:              #(p/multiply (p/angle->complex (unit 15)) %)
./src//turtle_geometry/protocols.cljc:  (angle->complex [angle]))
./src//turtle_geometry/turtle.cljc:    (let [v (p/multiply (p/angle->complex (:unit heading))
